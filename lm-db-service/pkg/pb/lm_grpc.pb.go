// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pb/lm.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeaveManagementSerivceClient is the client API for LeaveManagementSerivce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaveManagementSerivceClient interface {
	ApplyLeave(ctx context.Context, in *ApplyLeaveRequest, opts ...grpc.CallOption) (*ApplyLeaveResponse, error)
	ChangeLeaveStatus(ctx context.Context, in *ChangeLeaveStatusRequest, opts ...grpc.CallOption) (*ChangeLeaveStatusResponse, error)
	LeavesList(ctx context.Context, in *LeavesListRequest, opts ...grpc.CallOption) (*LeavesListResponse, error)
	GetLeaveById(ctx context.Context, in *GetLeaveByIdRequest, opts ...grpc.CallOption) (*GetLeaveByIdResponse, error)
	DeleteLeave(ctx context.Context, in *DeleteLeaveRequest, opts ...grpc.CallOption) (*DeleteLeaveResponse, error)
	UpdateLeave(ctx context.Context, in *UpdateLeaveRequest, opts ...grpc.CallOption) (*UpdateLeaveResponse, error)
}

type leaveManagementSerivceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaveManagementSerivceClient(cc grpc.ClientConnInterface) LeaveManagementSerivceClient {
	return &leaveManagementSerivceClient{cc}
}

func (c *leaveManagementSerivceClient) ApplyLeave(ctx context.Context, in *ApplyLeaveRequest, opts ...grpc.CallOption) (*ApplyLeaveResponse, error) {
	out := new(ApplyLeaveResponse)
	err := c.cc.Invoke(ctx, "/leaveManagement.leaveManagementSerivce/ApplyLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveManagementSerivceClient) ChangeLeaveStatus(ctx context.Context, in *ChangeLeaveStatusRequest, opts ...grpc.CallOption) (*ChangeLeaveStatusResponse, error) {
	out := new(ChangeLeaveStatusResponse)
	err := c.cc.Invoke(ctx, "/leaveManagement.leaveManagementSerivce/ChangeLeaveStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveManagementSerivceClient) LeavesList(ctx context.Context, in *LeavesListRequest, opts ...grpc.CallOption) (*LeavesListResponse, error) {
	out := new(LeavesListResponse)
	err := c.cc.Invoke(ctx, "/leaveManagement.leaveManagementSerivce/LeavesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveManagementSerivceClient) GetLeaveById(ctx context.Context, in *GetLeaveByIdRequest, opts ...grpc.CallOption) (*GetLeaveByIdResponse, error) {
	out := new(GetLeaveByIdResponse)
	err := c.cc.Invoke(ctx, "/leaveManagement.leaveManagementSerivce/GetLeaveById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveManagementSerivceClient) DeleteLeave(ctx context.Context, in *DeleteLeaveRequest, opts ...grpc.CallOption) (*DeleteLeaveResponse, error) {
	out := new(DeleteLeaveResponse)
	err := c.cc.Invoke(ctx, "/leaveManagement.leaveManagementSerivce/DeleteLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveManagementSerivceClient) UpdateLeave(ctx context.Context, in *UpdateLeaveRequest, opts ...grpc.CallOption) (*UpdateLeaveResponse, error) {
	out := new(UpdateLeaveResponse)
	err := c.cc.Invoke(ctx, "/leaveManagement.leaveManagementSerivce/UpdateLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaveManagementSerivceServer is the server API for LeaveManagementSerivce service.
// All implementations must embed UnimplementedLeaveManagementSerivceServer
// for forward compatibility
type LeaveManagementSerivceServer interface {
	ApplyLeave(context.Context, *ApplyLeaveRequest) (*ApplyLeaveResponse, error)
	ChangeLeaveStatus(context.Context, *ChangeLeaveStatusRequest) (*ChangeLeaveStatusResponse, error)
	LeavesList(context.Context, *LeavesListRequest) (*LeavesListResponse, error)
	GetLeaveById(context.Context, *GetLeaveByIdRequest) (*GetLeaveByIdResponse, error)
	DeleteLeave(context.Context, *DeleteLeaveRequest) (*DeleteLeaveResponse, error)
	UpdateLeave(context.Context, *UpdateLeaveRequest) (*UpdateLeaveResponse, error)
	mustEmbedUnimplementedLeaveManagementSerivceServer()
}

// UnimplementedLeaveManagementSerivceServer must be embedded to have forward compatible implementations.
type UnimplementedLeaveManagementSerivceServer struct {
}

func (UnimplementedLeaveManagementSerivceServer) ApplyLeave(context.Context, *ApplyLeaveRequest) (*ApplyLeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyLeave not implemented")
}
func (UnimplementedLeaveManagementSerivceServer) ChangeLeaveStatus(context.Context, *ChangeLeaveStatusRequest) (*ChangeLeaveStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeLeaveStatus not implemented")
}
func (UnimplementedLeaveManagementSerivceServer) LeavesList(context.Context, *LeavesListRequest) (*LeavesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeavesList not implemented")
}
func (UnimplementedLeaveManagementSerivceServer) GetLeaveById(context.Context, *GetLeaveByIdRequest) (*GetLeaveByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaveById not implemented")
}
func (UnimplementedLeaveManagementSerivceServer) DeleteLeave(context.Context, *DeleteLeaveRequest) (*DeleteLeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLeave not implemented")
}
func (UnimplementedLeaveManagementSerivceServer) UpdateLeave(context.Context, *UpdateLeaveRequest) (*UpdateLeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLeave not implemented")
}
func (UnimplementedLeaveManagementSerivceServer) mustEmbedUnimplementedLeaveManagementSerivceServer() {
}

// UnsafeLeaveManagementSerivceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaveManagementSerivceServer will
// result in compilation errors.
type UnsafeLeaveManagementSerivceServer interface {
	mustEmbedUnimplementedLeaveManagementSerivceServer()
}

func RegisterLeaveManagementSerivceServer(s grpc.ServiceRegistrar, srv LeaveManagementSerivceServer) {
	s.RegisterService(&LeaveManagementSerivce_ServiceDesc, srv)
}

func _LeaveManagementSerivce_ApplyLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyLeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveManagementSerivceServer).ApplyLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaveManagement.leaveManagementSerivce/ApplyLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveManagementSerivceServer).ApplyLeave(ctx, req.(*ApplyLeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveManagementSerivce_ChangeLeaveStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeLeaveStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveManagementSerivceServer).ChangeLeaveStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaveManagement.leaveManagementSerivce/ChangeLeaveStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveManagementSerivceServer).ChangeLeaveStatus(ctx, req.(*ChangeLeaveStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveManagementSerivce_LeavesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeavesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveManagementSerivceServer).LeavesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaveManagement.leaveManagementSerivce/LeavesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveManagementSerivceServer).LeavesList(ctx, req.(*LeavesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveManagementSerivce_GetLeaveById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaveByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveManagementSerivceServer).GetLeaveById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaveManagement.leaveManagementSerivce/GetLeaveById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveManagementSerivceServer).GetLeaveById(ctx, req.(*GetLeaveByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveManagementSerivce_DeleteLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveManagementSerivceServer).DeleteLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaveManagement.leaveManagementSerivce/DeleteLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveManagementSerivceServer).DeleteLeave(ctx, req.(*DeleteLeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveManagementSerivce_UpdateLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveManagementSerivceServer).UpdateLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaveManagement.leaveManagementSerivce/UpdateLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveManagementSerivceServer).UpdateLeave(ctx, req.(*UpdateLeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaveManagementSerivce_ServiceDesc is the grpc.ServiceDesc for LeaveManagementSerivce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaveManagementSerivce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leaveManagement.leaveManagementSerivce",
	HandlerType: (*LeaveManagementSerivceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyLeave",
			Handler:    _LeaveManagementSerivce_ApplyLeave_Handler,
		},
		{
			MethodName: "ChangeLeaveStatus",
			Handler:    _LeaveManagementSerivce_ChangeLeaveStatus_Handler,
		},
		{
			MethodName: "LeavesList",
			Handler:    _LeaveManagementSerivce_LeavesList_Handler,
		},
		{
			MethodName: "GetLeaveById",
			Handler:    _LeaveManagementSerivce_GetLeaveById_Handler,
		},
		{
			MethodName: "DeleteLeave",
			Handler:    _LeaveManagementSerivce_DeleteLeave_Handler,
		},
		{
			MethodName: "UpdateLeave",
			Handler:    _LeaveManagementSerivce_UpdateLeave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/lm.proto",
}
